/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.nuvl.nuvlworld.gui;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import java.awt.Color;
import java.awt.Container;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Random;
import java.util.Set;
import java.util.TimeZone;
import java.util.regex.Matcher;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFormattedTextField;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import org.jdatepicker.JDatePicker;
import org.jdatepicker.impl.JDatePanelImpl;
import org.jdatepicker.impl.JDatePickerImpl;
import org.jdatepicker.impl.UtilDateModel;
import org.nuvl.argue.aba_plus.Sentence;
import org.nuvl.nuvlworld.NuvlWorldPreferences;
import org.nuvl.nuvlworld.NuvlWorldStore;

/**
 *
 * @author Jeff Thompson, jeff@thefirst.org
 */
public class NewEventDialog extends javax.swing.JDialog {

  /**
   * Creates a new NewEventDialog.
   */
  public NewEventDialog
    (java.awt.Frame parent, NuvlWorldStore store,
     NuvlWorldPreferences preferences, LocalDate initialDate)
  {
    super(parent, true);
    store_ = store;
    preferences_ = preferences;
    
    initComponents();

    startDatePicker_ = makeDatePicker(startDatePanel_);
    endDatePicker_ = makeDatePicker(endDatePanel_);
    ((UtilDateModel)startDatePicker_.getModel()).setValue
      (new Date(initialDate.getYear() - 1900, initialDate.getMonthValue() - 1,
                initialDate.getDayOfMonth()));
    ((UtilDateModel)endDatePicker_.getModel()).setValue
      ((Date)startDatePicker_.getModel().getValue());

    // Set up the airport combo boxes with IATA codes.
    List<String> airports = new ArrayList<>();
    airports.add("");
    for (Sentence sentence : store_.sentencesByPredicate_.getOrDefault
         ("iataAirportCode", emptySentences_)) {
      Matcher matcher = NuvlWorldStore.stringPattern_.matcher(sentence.symbol());
      if (matcher.find())
        airports.add(NuvlWorldStore.fromEscapedString(matcher.group(3)));
    }
    Object[] airportsArray = airports.toArray();
    Arrays.sort(airportsArray);
    fromComboBox_.setModel(new DefaultComboBoxModel(airportsArray));
    toComboBox_.setModel(new DefaultComboBoxModel(airportsArray));
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jLabel1 = new javax.swing.JLabel();
    jLabel2 = new javax.swing.JLabel();
    titleText_ = new javax.swing.JTextField();
    startDatePanel_ = new javax.swing.JPanel();
    startTimeText_ = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    endDatePanel_ = new javax.swing.JPanel();
    endTimeText_ = new javax.swing.JTextField();
    fromLabel_ = new javax.swing.JLabel();
    fromComboBox_ = new javax.swing.JComboBox<>();
    toLabel_ = new javax.swing.JLabel();
    toComboBox_ = new javax.swing.JComboBox<>();
    okButton_ = new javax.swing.JButton();
    cancelButton_ = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    setTitle("New Event");

    jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel1.setText("Title:");

    jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel2.setText("Start:");

    titleText_.setText("New Event");

    startDatePanel_.setPreferredSize(new java.awt.Dimension(188, 30));

    javax.swing.GroupLayout startDatePanel_Layout = new javax.swing.GroupLayout(startDatePanel_);
    startDatePanel_.setLayout(startDatePanel_Layout);
    startDatePanel_Layout.setHorizontalGroup(
      startDatePanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 119, Short.MAX_VALUE)
    );
    startDatePanel_Layout.setVerticalGroup(
      startDatePanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 30, Short.MAX_VALUE)
    );

    startTimeText_.setText("12:00");

    jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    jLabel3.setText("End:");

    endDatePanel_.setPreferredSize(new java.awt.Dimension(188, 30));

    javax.swing.GroupLayout endDatePanel_Layout = new javax.swing.GroupLayout(endDatePanel_);
    endDatePanel_.setLayout(endDatePanel_Layout);
    endDatePanel_Layout.setHorizontalGroup(
      endDatePanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 119, Short.MAX_VALUE)
    );
    endDatePanel_Layout.setVerticalGroup(
      endDatePanel_Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGap(0, 30, Short.MAX_VALUE)
    );

    endTimeText_.setText("12:00");

    fromLabel_.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    fromLabel_.setText("From:");

    toLabel_.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
    toLabel_.setText("To:");

    okButton_.setText("OK");
    okButton_.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        okButton_ActionPerformed(evt);
      }
    });

    cancelButton_.setText("Cancel");
    cancelButton_.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        cancelButton_ActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGap(2, 2, 2)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(titleText_)
          .addGroup(layout.createSequentialGroup()
            .addComponent(startDatePanel_, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(startTimeText_, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(29, 29, 29)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(fromLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(toLabel_, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(3, 3, 3)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(toComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(fromComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)))
          .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
              .addComponent(okButton_)
              .addComponent(endDatePanel_, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createSequentialGroup()
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(endTimeText_, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(cancelButton_)))))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(titleText_, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(34, 34, 34)
            .addComponent(jLabel2))
          .addGroup(layout.createSequentialGroup()
            .addGap(29, 29, 29)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(startTimeText_, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(fromLabel_)
                .addComponent(fromComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
              .addComponent(startDatePanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addGroup(layout.createSequentialGroup()
            .addGap(3, 3, 3)
            .addComponent(endDatePanel_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
          .addGroup(layout.createSequentialGroup()
            .addGap(8, 8, 8)
            .addComponent(jLabel3))
          .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
              .addComponent(endTimeText_, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
              .addComponent(toLabel_)
              .addComponent(toComboBox_, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        .addGap(18, 18, 18)
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(okButton_)
          .addComponent(cancelButton_))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void okButton_ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_okButton_ActionPerformed
  {//GEN-HEADEREND:event_okButton_ActionPerformed
    // Get the start and end date and time.
    Date startDate = (Date)startDatePicker_.getModel().getValue();
    Date endDate = (Date)endDatePicker_.getModel().getValue();

    LocalTime startTime, endTime;
    if (startTimeText_.getText().length() > 2 && startTimeText_.getText().charAt(1) == ':')
      // LocalTime.parse doesn't like single-digit hours.
      startTimeText_.setText("0" + startTimeText_.getText());
    try {
      startTime = LocalTime.parse(startTimeText_.getText());
    } catch (DateTimeParseException ex) {
      JOptionPane.showMessageDialog(this, "Please enter a valid start time");
      startTimeText_.requestFocus();
      return;
    }

    if (endTimeText_.getText().length() > 2 && endTimeText_.getText().charAt(1) == ':')
      // LocalTime.parse doesn't like single-digit hours.
      endTimeText_.setText("0" + endTimeText_.getText());
    try {
      endTime = LocalTime.parse(endTimeText_.getText());
    } catch (DateTimeParseException ex) {
      JOptionPane.showMessageDialog(this, "Please enter a valid end time");
      endTimeText_.requestFocus();
      return;
    }

    // Get the time zones at the start and end locations.
    String fromAirportIata = (String)fromComboBox_.getSelectedItem();
    if (fromAirportIata.equals("")) {
      JOptionPane.showMessageDialog(this, "Please select a From airport");
      fromComboBox_.requestFocus();
      return;
    }
    String toAirportIata = (String)toComboBox_.getSelectedItem();
    if (toAirportIata.equals("")) {
      JOptionPane.showMessageDialog(this, "Please select a To airport");
      toComboBox_.requestFocus();
      return;
    }

    String[] fromAirportId = new String[1];
    TimeZone startTimeZone = airportIataToTimeZone(fromAirportIata, fromAirportId);
    if (startTimeZone == null)
      // Already showed the error.
      return;
    String[] toAirportId = new String[1];
    TimeZone endTimeZone = airportIataToTimeZone(toAirportIata, toAirportId);
    if (endTimeZone == null)
      // Already showed the error.
      return;

    // Get the UTC start and end times.
    long startMillis = NuvlWorldStore.toUtcMillis
      (startTimeZone, startDate, startTime);
    long endMillis = NuvlWorldStore.toUtcMillis(endTimeZone, endDate, endTime);

    if (endMillis < startMillis) {
      JOptionPane.showMessageDialog(this, "Error: The end time is before the start time");
      return;
    }

    // Create the event.
    String eventClass = "Q61509";
    // TODO: Make sure this is unique.
    String eventId = preferences_.getUsername() + "_" + eventClass + "_" +
      new SimpleDateFormat("yyyyMMdd_HHmmss").format(startMillis) + "_" +
      random_.nextInt(1000);
    System.out.println("");
    System.out.println("(instanceOf " + eventId + " " + eventClass + ")");
    System.out.println
      ("(description " + eventId + " " + NuvlWorldStore.toEscapedString(titleText_.getText()) + ")");
    System.out.println
      ("(subAttrOf " + eventId + " (TimeIntervalFn " + startMillis + " " +
       endMillis + "))");
    System.out.println("(participant " + eventId + " " + preferences_.getUsername() + ")");
    System.out.println
      ("(startPoint " + eventId + " " + fromAirportId[0] + ")");
    System.out.println
      ("(destinationPoint " + eventId + " " + toAirportId[0] + ")");
  }//GEN-LAST:event_okButton_ActionPerformed

  /**
   * Use airportIata to find its location IATA time zone.
   * @param airportIata The airport IATA code.
   * @param airportId Set airportId[0] to the airport's item ID.
   * @return The TimeZone of the IATA time zone.
   */
  private TimeZone
  airportIataToTimeZone(String airportIata, String[] airportId)
  {
    // Reverse look up from airportIata to its ID.
    Matcher airportMatch = store_.findFirstByPredicate
      ("iataAirportCode", NuvlWorldStore.stringPattern_, 3,
       NuvlWorldStore.toEscapedString(airportIata));
    if (airportMatch == null) {
      // We don't expect this to happen.
      JOptionPane.showMessageDialog(this, "Unrecognized airport code " + airportIata);
      return null;
    }
    airportId[0] = airportMatch.group(2);

    Matcher locationMatch = store_.findFirstByPredicate
      ("locationIanaTimeZone", NuvlWorldStore.termPattern_, 2, airportId[0]);
    if (locationMatch == null) {
      JOptionPane.showMessageDialog
        (this, "Can't find location time zone for " + airportIata);
      return null;
    }
    String locationIanaId = locationMatch.group(3);

    String locationIanaLabel = store_.descriptions_.getOrDefault
      (locationIanaId, null);
    if (locationIanaLabel == null) {
      // We don't expect this error.
      JOptionPane.showMessageDialog
        (this, "Can't find the description for time zone " + locationIanaId);
      return null;
    }

    // CalendarKB already checked that the label is not regognized.
    return TimeZone.getTimeZone(locationIanaLabel.replace(" ", "_"));
  }

  private void cancelButton_ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_cancelButton_ActionPerformed
  {//GEN-HEADEREND:event_cancelButton_ActionPerformed
    setVisible(false);
    dispose();
  }//GEN-LAST:event_cancelButton_ActionPerformed

  /**
   * Make a JDatePicker, adding it to the given panel.
   * @param panel The JPanel for the date picker.
   * @return The new JDatePicker.
   */
  private JDatePicker
  makeDatePicker(JPanel panel)
  {
    Properties p = new Properties();
    p.put("text.today", "Today");
    p.put("text.month", "Month");
    p.put("text.year", "Year");
    UtilDateModel model = new UtilDateModel();
    model.setValue(new Date());
    JDatePanelImpl datePanel = new JDatePanelImpl(model, p);
    // TODO: Fix: The date panel appears far from the date picker.
    JDatePickerImpl datePicker = new JDatePickerImpl
      (datePanel, new DateLabelFormatter());
    datePicker.setLocation(0, 0);
    datePicker.setSize(panel.getSize().width, panel.getSize().height);
    // This is a hack to change the month label background from the unreadable dark blue.
    ((Container)datePanel.getComponents()[0]).getComponents()[0].setBackground
      (new Color(200, 200, 255));
    panel.add(datePicker);

    return datePicker;
  }

  private static class DateLabelFormatter extends JFormattedTextField.AbstractFormatter {
    private static final SimpleDateFormat dateFormatter_ =
      new SimpleDateFormat("yyyy-MM-dd");

    @Override
    public Object stringToValue(String text) throws ParseException {
        return dateFormatter_.parseObject(text);
    }

    @Override
    public String valueToString(Object value) throws ParseException {
        if (value != null) {
            Calendar cal = (Calendar)value;
            return dateFormatter_.format(cal.getTime());
        }

        return "";
    }
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[])
  {
    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run()
      {
        NewEventDialog dialog = new NewEventDialog
          (new javax.swing.JFrame(), null, null, LocalDate.now());
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {
          @Override
          public void windowClosing(java.awt.event.WindowEvent e)
          {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton cancelButton_;
  private javax.swing.JPanel endDatePanel_;
  private javax.swing.JTextField endTimeText_;
  private javax.swing.JComboBox<String> fromComboBox_;
  private javax.swing.JLabel fromLabel_;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel2;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JButton okButton_;
  private javax.swing.JPanel startDatePanel_;
  private javax.swing.JTextField startTimeText_;
  private javax.swing.JTextField titleText_;
  private javax.swing.JComboBox<String> toComboBox_;
  private javax.swing.JLabel toLabel_;
  // End of variables declaration//GEN-END:variables
  private final NuvlWorldStore store_;
  private final NuvlWorldPreferences preferences_;
  private final JDatePicker startDatePicker_;
  private final JDatePicker endDatePicker_;
  private static final Gson gson_ = new GsonBuilder().disableHtmlEscaping().create();
  private static final Random random_ = new Random();
  private static final Set<Sentence> emptySentences_ = new HashSet<>();
}
